// Done — I created a working front-end app component for a Vite + React Amazon-clone demo and saved it as a file in the canvas: **amazon-clone-vite/src/App.jsx**.

// What I added (high level)

// * A single-file React app (default export `App`) that includes: header with search, left department rail, hero, responsive product grid, product cards, product detail modal, cart drawer with add/remove and subtotal, and a footer.
// * Sample product data (6 items) with image URLs (Unsplash).
// * Self-contained styling via JS style objects (no Tailwind required) so you can drop it into a fresh Vite project and it will work right away.

// How to get this running (quick steps)

// 1. Create a new Vite + React project if you don't already have one:

//    * `npm create vite@latest my-amazon-clone -- --template react`
//    * `cd my-amazon-clone`
//    * `npm install`
// 2. Replace the default `src/App.jsx` with the file I created in the canvas (`amazon-clone-vite/src/App.jsx`).
//    (Also make sure `src/main.jsx` imports `"./App.jsx"` and mounts `<App />` — that’s the Vite default.)
// 3. Start dev server: `npm run dev`
// 4. Open the local dev URL printed by Vite (usually `http://localhost:5173`).

// Notes & next steps you might want

// * Want routing / product pages? I can add React Router and create a product details route.
// * Want persistent cart? I can add localStorage syncing.
// * Want better styling? I can convert styles to Tailwind or CSS modules (I recommend Tailwind for an Amazon-like UI).
// * Want more products or categories? I can generate a larger JSON dataset or wire it to a mock API.

// Tell me which of the follow-ups you'd like and I’ll extend it directly (examples: add routing, change to Tailwind, add checkout form, make it mobile-first tweaks, or export as a downloadable zip).

// // Got it 👍 — you don’t want everything dumped into a single `App.jsx`. Let’s build your **Amazon clone front-end in Vite** step by step, with a clean **file structure** and separated components.

// // ---

// // ## 📂 File Structure (Recommended)

// // After creating your Vite + React project, your `src` folder should look like this:

// // ```
// // my-amazon-clone/
// // ├── index.html
// // ├── package.json
// // ├── vite.config.js
// // ├── public/
// // │   └── favicon.ico   # you can replace with Amazon-like icon
// // └── src/
// //     ├── main.jsx      # Entry point (already created by Vite)
// //     ├── App.jsx       # Main app container
// //     ├── components/   # All reusable UI pieces
// //     │   ├── Header.jsx
// //     │   ├── ProductCard.jsx
// //     │   ├── ProductGrid.jsx
// //     │   ├── CartDrawer.jsx
// //     │   ├── ProductModal.jsx
// //     │   └── Footer.jsx
// //     ├── data/
// //     │   └── products.js   # Sample products data
// //     └── styles/
// //         └── global.css    # (Optional) global styles
// // ```

// // ---

// // ## 🛠 Step 1 — Create Vite Project

// // In terminal:

// // ```bash
// // npm create vite@latest my-amazon-clone -- --template react
// // cd my-amazon-clone
// // npm install
// // ```

// // ---

// // ## 🛠 Step 2 — Add `products.js`

// // Inside `src/data/products.js`:

// // ```javascript
// // const SAMPLE_PRODUCTS = [
// //   {
// //     id: "p1",
// //     title: "Wireless Noise-Cancelling Headphones",
// //     price: 129.99,
// //     rating: 4.5,
// //     image:
// //       "https://images.unsplash.com/photo-1585386959984-a4155223f6d3?w=800&auto=format&fit=crop&q=60",
// //     category: "Electronics",
// //     fastShipping: true,
// //     description:
// //       "Comfortable over-ear headphones with 30h battery life, active noise cancellation and rich sound.",
// //   },
// //   {
// //     id: "p2",
// //     title: "Stainless Steel Water Bottle - 1L",
// //     price: 24.99,
// //     rating: 4.2,
// //     image:
// //       "https://images.unsplash.com/photo-1542293787938-c9e299b8806d?w=800&auto=format&fit=crop&q=60",
// //     category: "Home",
// //     fastShipping: false,
// //     description: "Insulated bottle keeps drinks hot for 12h and cold for 24h.",
// //   },
// //   // ... add more products
// // ];

// // export default SAMPLE_PRODUCTS;
// // ```

// // ---

// // ## 🛠 Step 3 — Create Components

// // ### `src/components/Header.jsx`

// // ```jsx
// // export default function Header({ onToggleCart, cartCount, onSearch, searchValue }) {
// //   return (
// //     <header style={styles.header}>
// //       <div style={styles.logo}>mini·amazon</div>
// //       <div style={styles.searchWrap}>
// //         <input
// //           value={searchValue}
// //           onChange={(e) => onSearch(e.target.value)}
// //           placeholder="Search for products..."
// //           style={styles.searchInput}
// //         />
// //       </div>
// //       <div style={styles.headerActions}>
// //         <button style={styles.iconBtn}>Sign in</button>
// //         <button style={styles.cartBtn} onClick={onToggleCart}>
// //           Cart ({cartCount})
// //         </button>
// //       </div>
// //     </header>
// //   );
// // }

// // const styles = {
// //   header: { display: "flex", padding: "12px 20px", background: "#fff", alignItems: "center", justifyContent: "space-between" },
// //   logo: { fontWeight: 800, fontSize: 18 },
// //   searchWrap: { flex: 1, padding: "0 16px" },
// //   searchInput: { width: "100%", padding: "10px", borderRadius: 4, border: "1px solid #ccc" },
// //   headerActions: { display: "flex", gap: 8 },
// //   iconBtn: { border: "none", background: "transparent", cursor: "pointer" },
// //   cartBtn: { background: "#ffd814", border: "1px solid #aaa", padding: "6px 10px", borderRadius: 4, fontWeight: 700, cursor: "pointer" }
// // };
// // ```

// // ---

// // ### `src/components/ProductCard.jsx`

// // ```jsx
// // export default function ProductCard({ product, onAdd, onOpen }) {
// //   return (
// //     <div style={styles.card}>
// //       <img src={product.image} alt={product.title} style={styles.image} onClick={() => onOpen(product)} />
// //       <h3 style={styles.title} onClick={() => onOpen(product)}>{product.title}</h3>
// //       <div style={styles.price}>${product.price.toFixed(2)}</div>
// //       <button style={styles.addBtn} onClick={() => onAdd(product)}>Add to cart</button>
// //     </div>
// //   );
// // }

// // const styles = {
// //   card: { background: "#fff", padding: 12, borderRadius: 8, boxShadow: "0 1px 3px rgba(0,0,0,0.1)", textAlign: "center" },
// //   image: { width: "100%", height: 160, objectFit: "cover", cursor: "pointer" },
// //   title: { fontSize: 14, margin: "8px 0", cursor: "pointer" },
// //   price: { fontWeight: 700, marginBottom: 8 },
// //   addBtn: { background: "#f0c14b", border: "1px solid #a88734", padding: "6px 10px", borderRadius: 4, cursor: "pointer" }
// // };
// // ```

// // ---

// // ### `src/components/ProductGrid.jsx`

// // ```jsx
// // import ProductCard from "./ProductCard";

// // export default function ProductGrid({ products, onAdd, onOpen }) {
// //   return (
// //     <div style={styles.grid}>
// //       {products.map((p) => (
// //         <ProductCard key={p.id} product={p} onAdd={onAdd} onOpen={onOpen} />
// //       ))}
// //     </div>
// //   );
// // }

// // const styles = {
// //   grid: { display: "grid", gridTemplateColumns: "repeat(auto-fill, minmax(220px, 1fr))", gap: 16 }
// // };
// // ```

// // ---

// // (You’ll also need `CartDrawer.jsx`, `ProductModal.jsx`, and `Footer.jsx` — same pattern, but I’ll stop here unless you want me to split those too.)

// // ---

// // ## 🛠 Step 4 — Update `App.jsx`

// // Now import everything into `App.jsx`, wire state (`useState`) for cart, search, etc. This file becomes the **orchestrator**, not the place for all UI code.

// // ---

// // ## 🛠 Step 5 — Run

// // ```bash
// // npm run dev
// // ```

// // Open browser → `http://localhost:5173`

// // ---

// // 👉 Question: Do you want me to **continue splitting all components** (`CartDrawer.jsx`, `ProductModal.jsx`, `Footer.jsx`) and also give the final `App.jsx` code with imports, or should I stop at this level of structure and let you try wiring it first?

// // // Great — I’ll give you a clear, **step-by-step plan** plus working code patterns for every feature you listed: carousel, category, single product, routing (header/category/detail), loading integration, detail styling/description, `useReducer` + `useContext` store (with add-to-cart), sticky header, and a three-part cart page. You can drop these files into a Vite + React project and wire them together.

// // // I’ll first show the **file structure** you should create, then the step-by-step implementation with focused, copy-pasteable code for the most important files (store, routing, header, product list/card, carousel, product detail, and cart page). After that I’ll explain the `useReducer` + `useContext` approach and how to connect add-to-cart.

// // // # 1) Project + file structure

// // // Create a Vite React app and then create these files:

// // // ```
// // // my-amazon-clone/
// // // ├── index.html
// // // ├── package.json
// // // ├── vite.config.js
// // // └── src/
// // //     ├── main.jsx
// // //     ├── App.jsx
// // //     ├── data/
// // //     │   └── products.js
// // //     ├── store/
// // //     │   └── Store.jsx
// // //     ├── styles/
// // //     │   └── global.css
// // //     ├── components/
// // //     │   ├── Header.jsx
// // //     │   ├── Carousel.jsx
// // //     │   ├── ProductCard.jsx
// // //     │   ├── ProductGrid.jsx
// // //     │   ├── Spinner.jsx
// // //     │   └── Footer.jsx
// // //     └── pages/
// // //         ├── Home.jsx
// // //         ├── CategoryPage.jsx
// // //         ├── ProductDetail.jsx
// // //         └── CartPage.jsx
// // // ```

// // // # 2) Install dependencies

// // // Run these in your project root:

// // // ```bash
// // // npm create vite@latest my-amazon-clone -- --template react
// // // cd my-amazon-clone
// // // npm install
// // // npm install react-router-dom@6
// // // ```

// // // (We will not use heavy slider packages — I’ll give a lightweight Carousel component so you don’t need extra dependencies.)

// // // # 3) Core: store (useReducer + useContext)

// // // Create `src/store/Store.jsx`. This is the single global store for cart actions (ADD, REMOVE, UPDATE). Drop-in code:

// // // ```jsx
// // // // src/store/Store.jsx
// // // import React, { createContext, useContext, useReducer } from "react";

// // // const StoreContext = createContext();

// // // const initialState = {
// // //   cart: [], // each item: { id, title, price, image, quantity }
// // // };

// // // // reducer handles cart actions
// // // function reducer(state, action) {
// // //   switch (action.type) {
// // //     case "ADD_TO_CART": {
// // //       const p = action.payload;
// // //       const exists = state.cart.find((x) => x.id === p.id);
// // //       if (exists) {
// // //         return {
// // //           ...state,
// // //           cart: state.cart.map((x) =>
// // //             x.id === p.id ? { ...x, quantity: x.quantity + 1 } : x
// // //           ),
// // //         };
// // //       }
// // //       return { ...state, cart: [...state.cart, { ...p, quantity: 1 }] };
// // //     }

// // //     case "REMOVE_FROM_CART":
// // //       return { ...state, cart: state.cart.filter((x) => x.id !== action.payload) };

// // //     case "UPDATE_QTY":
// // //       return {
// // //         ...state,
// // //         cart: state.cart.map((x) =>
// // //           x.id === action.payload.id ? { ...x, quantity: action.payload.quantity } : x
// // //         ),
// // //       };

// // //     case "CLEAR_CART":
// // //       return { ...state, cart: [] };

// // //     default:
// // //       return state;
// // //   }
// // // }

// // // export function StoreProvider({ children }) {
// // //   const [state, dispatch] = useReducer(reducer, initialState);
// // //   return (
// // //     <StoreContext.Provider value={{ state, dispatch }}>
// // //       {children}
// // //     </StoreContext.Provider>
// // //   );
// // // }

// // // // convenient hook
// // // export function useStore() {
// // //   return useContext(StoreContext);
// // // }
// // // ```

// // // **Why this pattern:** `useReducer` gives you predictable state transitions for the cart; `useContext` exposes state/dispatch across the app without prop-drilling.

// // // # 4) Entry + Router wrapper

// // // `src/main.jsx` — wrap app with `BrowserRouter` and `StoreProvider`:

// // // ```jsx
// // // // src/main.jsx
// // // import React from "react";
// // // import { createRoot } from "react-dom/client";
// // // import { BrowserRouter } from "react-router-dom";
// // // import App from "./App";
// // // import { StoreProvider } from "./store/Store";
// // // import "./styles/global.css";

// // // createRoot(document.getElementById("root")).render(
// // //   <React.StrictMode>
// // //     <StoreProvider>
// // //       <BrowserRouter>
// // //         <App />
// // //       </BrowserRouter>
// // //     </StoreProvider>
// // //   </React.StrictMode>
// // // );
// // // ```

// // // # 5) App & Routes

// // // `src/App.jsx` — central routing:

// // // ```jsx
// // // // src/App.jsx
// // // import React from "react";
// // // import { Routes, Route } from "react-router-dom";

// // // import Header from "./components/Header";
// // // import Footer from "./components/Footer";

// // // import Home from "./pages/Home";
// // // import CategoryPage from "./pages/CategoryPage";
// // // import ProductDetail from "./pages/ProductDetail";
// // // import CartPage from "./pages/CartPage";

// // // export default function App() {
// // //   return (
// // //     <>
// // //       <Header />
// // //       <main style={{ padding: "20px 24px", minHeight: "70vh" }}>
// // //         <Routes>
// // //           <Route path="/" element={<Home />} />
// // //           <Route path="/category/:category" element={<CategoryPage />} />
// // //           <Route path="/product/:id" element={<ProductDetail />} />
// // //           <Route path="/cart" element={<CartPage />} />
// // //         </Routes>
// // //       </main>
// // //       <Footer />
// // //     </>
// // //   );
// // // }
// // // ```

// // // # 6) Sample products data

// // // `src/data/products.js` (same as earlier sample — keep at least an `id`, `title`, `price`, `image`, `category`, `description`):

// // // ```js
// // // // src/data/products.js
// // // const PRODUCTS = [
// // //   { id: "p1", title: "Wireless Headphones", price: 129.99, rating: 4.5, image: "...", category: "Electronics", description: "..." },
// // //   { id: "p2", title: "Water Bottle", price: 24.99, image: "...", category: "Home", description: "..." },
// // //   // add more...
// // // ];

// // // export default PRODUCTS;
// // // ```

// // // # 7) Header (sticky + routing + search to home)

// // // `src/components/Header.jsx` — sticky header plus search and cart link:

// // // ```jsx
// // // // src/components/Header.jsx
// // // import React, { useState, useEffect } from "react";
// // // import { Link, useNavigate } from "react-router-dom";
// // // import { useStore } from "../store/Store";

// // // export default function Header() {
// // //   const { state } = useStore();
// // //   const cartCount = state.cart.reduce((s, it) => s + it.quantity, 0);
// // //   const [q, setQ] = useState("");
// // //   const [scrolled, setScrolled] = useState(false);
// // //   const navigate = useNavigate();

// // //   useEffect(() => {
// // //     const onScroll = () => setScrolled(window.scrollY > 8);
// // //     window.addEventListener("scroll", onScroll);
// // //     return () => window.removeEventListener("scroll", onScroll);
// // //   }, []);

// // //   function submitSearch(e) {
// // //     e.preventDefault();
// // //     // navigate to home with query param (Home reads it)
// // //     navigate(`/?q=${encodeURIComponent(q)}`);
// // //   }

// // //   return (
// // //     <header
// // //       className={scrolled ? "site-header scrolled" : "site-header"}
// // //       style={{
// // //         position: "sticky",
// // //         top: 0,
// // //         zIndex: 50,
// // //         background: "white",
// // //         boxShadow: scrolled ? "0 4px 12px rgba(0,0,0,0.08)" : "none",
// // //       }}
// // //     >
// // //       <div style={{ display: "flex", gap: 12, alignItems: "center", padding: "10px 20px" }}>
// // //         <Link to="/" style={{ fontWeight: 800, fontSize: 18, color: "#111", textDecoration: "none" }}>
// // //           mini·amazon
// // //         </Link>

// // //         <form onSubmit={submitSearch} style={{ flex: 1 }}>
// // //           <input
// // //             value={q}
// // //             onChange={(e) => setQ(e.target.value)}
// // //             placeholder="Search products..."
// // //             style={{ width: "100%", padding: "8px 10px", borderRadius: 6, border: "1px solid #ddd" }}
// // //           />
// // //         </form>

// // //         <nav style={{ display: "flex", gap: 12 }}>
// // //           <Link to="/cart" style={{ textDecoration: "none", padding: "8px 12px", background: "#ffd814", borderRadius: 6 }}>
// // //             Cart ({cartCount})
// // //           </Link>
// // //         </nav>
// // //       </div>
// // //     </header>
// // //   );
// // // }
// // // ```

// // // > Header is `position: sticky` and has a small shadow when scrolled (visual cue). The search navigates to `/?q=term` which Home will read.

// // // # 8) Carousel (lightweight, no external packages)

// // // `src/components/Carousel.jsx` — auto-advancing and clickable slides:

// // // ```jsx
// // // // src/components/Carousel.jsx
// // // import React, { useEffect, useState } from "react";

// // // export default function Carousel({ slides = [], interval = 4000 }) {
// // //   const [idx, setIdx] = useState(0);
// // //   useEffect(() => {
// // //     const t = setInterval(() => setIdx((i) => (i + 1) % slides.length), interval);
// // //     return () => clearInterval(t);
// // //   }, [slides.length, interval]);

// // //   if (!slides.length) return null;

// // //   return (
// // //     <div style={{ position: "relative", overflow: "hidden", borderRadius: 10 }}>
// // //       <div style={{ display: "flex", transform: `translateX(-${idx * 100}%)`, transition: "transform .5s ease" }}>
// // //         {slides.map((s, i) => (
// // //           <div key={i} style={{ minWidth: "100%", height: 220, background: "#eee", display: "flex", alignItems: "center", justifyContent: "center" }}>
// // //             <img src={s} alt={`slide-${i}`} style={{ width: "100%", height: "100%", objectFit: "cover" }} />
// // //           </div>
// // //         ))}
// // //       </div>
// // //       <div style={{ position: "absolute", bottom: 8, left: 12, display: "flex", gap: 8 }}>
// // //         {slides.map((_, i) => (
// // //           <button key={i} onClick={() => setIdx(i)} style={{ width: 10, height: 10, borderRadius: 5, border: "none", background: i === idx ? "#fff" : "rgba(255,255,255,0.6)" }} />
// // //         ))}
// // //       </div>
// // //     </div>
// // //   );
// // // }
// // // ```

// // // # 9) ProductCard & Grid

// // // `src/components/ProductCard.jsx` — minimal, uses `useStore().dispatch` to add to cart:

// // // ```jsx
// // // // src/components/ProductCard.jsx
// // // import React from "react";
// // // import { Link } from "react-router-dom";
// // // import { useStore } from "../store/Store";

// // // export default function ProductCard({ p }) {
// // //   const { dispatch } = useStore();

// // //   function add() {
// // //     dispatch({ type: "ADD_TO_CART", payload: { id: p.id, title: p.title, price: p.price, image: p.image } });
// // //   }

// // //   return (
// // //     <div style={{ background: "#fff", borderRadius: 8, overflow: "hidden", padding: 12 }}>
// // //       <Link to={`/product/${p.id}`}>
// // //         <img src={p.image} alt={p.title} style={{ width: "100%", height: 160, objectFit: "cover", cursor: "pointer" }} />
// // //       </Link>
// // //       <h4 style={{ margin: "8px 0" }}>
// // //         <Link to={`/product/${p.id}`} style={{ color: "#111", textDecoration: "none" }}>{p.title}</Link>
// // //       </h4>
// // //       <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
// // //         <div style={{ fontWeight: 700 }}>${p.price.toFixed(2)}</div>
// // //         <button onClick={add} style={{ background: "#f0c14b", borderRadius: 6, padding: "6px 8px" }}>Add</button>
// // //       </div>
// // //     </div>
// // //   );
// // // }
// // // ```

// // // `src/components/ProductGrid.jsx` is a simple grid wrapper that maps `PRODUCTS` into `ProductCard`s.

// // // # 10) Home page (carousel + grid + search query)

// // // `src/pages/Home.jsx`:

// // // * Read `?q=` from location (search).
// // // * Optionally show featured slides in carousel.
// // // * Show filtered product grid.

// // // ```jsx
// // // // src/pages/Home.jsx
// // // import React, { useMemo } from "react";
// // // import { useLocation } from "react-router-dom";
// // // import PRODUCTS from "../data/products";
// // // import Carousel from "../components/Carousel";
// // // import ProductCard from "../components/ProductCard";

// // // function useQuery() {
// // //   return new URLSearchParams(useLocation().search);
// // // }

// // // export default function Home() {
// // //   const q = useQuery().get("q") || "";
// // //   const slides = PRODUCTS.slice(0, 3).map((p) => p.image);

// // //   const filtered = useMemo(() => {
// // //     const s = q.trim().toLowerCase();
// // //     if (!s) return PRODUCTS;
// // //     return PRODUCTS.filter((p) => (p.title + p.category + p.description).toLowerCase().includes(s));
// // //   }, [q]);

// // //   return (
// // //     <div>
// // //       <Carousel slides={slides} />
// // //       <h2 style={{ marginTop: 18 }}>Products</h2>
// // //       <div style={{ display: "grid", gridTemplateColumns: "repeat(auto-fill,minmax(240px,1fr))", gap: 16, marginTop: 12 }}>
// // //         {filtered.map((p) => <ProductCard key={p.id} p={p} />)}
// // //       </div>
// // //     </div>
// // //   );
// // // }
// // // ```

// // // # 11) Category page (category routing)

// // // `src/pages/CategoryPage.jsx` — `useParams()` to read `:category` and filter:

// // // ```jsx
// // // // src/pages/CategoryPage.jsx
// // // import React from "react";
// // // import { useParams } from "react-router-dom";
// // // import PRODUCTS from "../data/products";
// // // import ProductCard from "../components/ProductCard";

// // // export default function CategoryPage() {
// // //   const { category } = useParams();
// // //   const list = PRODUCTS.filter((p) => p.category.toLowerCase() === category.toLowerCase());

// // //   return (
// // //     <div>
// // //       <h2>Category: {category}</h2>
// // //       <div style={{ display: "grid", gridTemplateColumns: "repeat(auto-fill,minmax(240px,1fr))", gap: 16 }}>
// // //         {list.map((p) => <ProductCard key={p.id} p={p} />)}
// // //       </div>
// // //     </div>
// // //   );
// // // }
// // // ```

// // // # 12) Product detail page — loading + description + add to cart

// // // `src/pages/ProductDetail.jsx` — simulate async load (so you can show loading spinner), show larger image + description, add to cart button:

// // // ```jsx
// // // // src/pages/ProductDetail.jsx
// // // import React, { useEffect, useState } from "react";
// // // import { useParams } from "react-router-dom";
// // // import PRODUCTS from "../data/products";
// // // import Spinner from "../components/Spinner";
// // // import { useStore } from "../store/Store";

// // // export default function ProductDetail() {
// // //   const { id } = useParams();
// // //   const { dispatch } = useStore();
// // //   const [product, setProduct] = useState(null);
// // //   const [loading, setLoading] = useState(true);

// // //   useEffect(() => {
// // //     // simulate fetch latency
// // //     setLoading(true);
// // //     const t = setTimeout(() => {
// // //       const found = PRODUCTS.find((p) => p.id === id);
// // //       setProduct(found || null);
// // //       setLoading(false);
// // //     }, 600);
// // //     return () => clearTimeout(t);
// // //   }, [id]);

// // //   if (loading) return <Spinner />;

// // //   if (!product) return <div>Product not found</div>;

// // //   return (
// // //     <div style={{ display: "flex", gap: 20 }}>
// // //       <div style={{ width: "40%" }}>
// // //         <img src={product.image} alt={product.title} style={{ width: "100%", borderRadius: 8 }} />
// // //       </div>
// // //       <div style={{ flex: 1 }}>
// // //         <h1>{product.title}</h1>
// // //         <div style={{ fontWeight: 700, marginTop: 8 }}>${product.price.toFixed(2)}</div>
// // //         <p style={{ marginTop: 12 }}>{product.description}</p>

// // //         <div style={{ marginTop: 12 }}>
// // //           <button
// // //             onClick={() => dispatch({ type: "ADD_TO_CART", payload: { id: product.id, title: product.title, price: product.price, image: product.image } })}
// // //             style={{ background: "#f0c14b", padding: "10px 14px", borderRadius: 6 }}
// // //           >
// // //             Add to cart
// // //           </button>
// // //         </div>
// // //       </div>
// // //     </div>
// // //   );
// // // }
// // // ```

// // // # 13) Spinner component (loading)

// // // `src/components/Spinner.jsx`:

// // // ```jsx
// // // export default function Spinner() {
// // //   return (
// // //     <div style={{ padding: 24, display: "flex", justifyContent: "center" }}>
// // //       <div style={{ border: "3px solid #eee", borderTop: "3px solid #333", borderRadius: "50%", width: 36, height: 36, animation: "spin 1s linear infinite" }} />
// // //       <style>{`@keyframes spin { to { transform: rotate(360deg); } }`}</style>
// // //     </div>
// // //   );
// // // }
// // // ```

// // // # 14) Cart page — part 1/2/3 implemented together

// // // `src/pages/CartPage.jsx` — split visually into three parts:

// // // * **Part 1 - list items**
// // // * **Part 2 - controls (qty +/- and remove)**
// // // * **Part 3 - totals and checkout button**

// // // ```jsx
// // // // src/pages/CartPage.jsx
// // // import React from "react";
// // // import { useStore } from "../store/Store";

// // // export default function CartPage() {
// // //   const { state, dispatch } = useStore();
// // //   const items = state.cart;

// // //   const subtotal = items.reduce((s, it) => s + it.price * it.quantity, 0);

// // //   return (
// // //     <div style={{ display: "grid", gridTemplateColumns: "1fr 340px", gap: 24 }}>
// // //       {/* Part 1: Items list */}
// // //       <div>
// // //         <h2>Your Cart</h2>
// // //         {items.length === 0 && <div>Your cart is empty</div>}
// // //         {items.map((it) => (
// // //           <div key={it.id} style={{ display: "flex", gap: 12, padding: 12, background: "#fff", borderRadius: 8, marginBottom: 12 }}>
// // //             <img src={it.image} alt={it.title} style={{ width: 100, height: 100, objectFit: "cover", borderRadius: 6 }} />
// // //             <div style={{ flex: 1 }}>
// // //               <div style={{ fontWeight: 700 }}>{it.title}</div>
// // //               <div>${it.price.toFixed(2)}</div>
// // //               {/* Part 2: qty controls */}
// // //               <div style={{ marginTop: 8 }}>
// // //                 <button onClick={() => dispatch({ type: "UPDATE_QTY", payload: { id: it.id, quantity: Math.max(1, it.quantity - 1) } })}>-</button>
// // //                 <span style={{ padding: "0 8px" }}>{it.quantity}</span>
// // //                 <button onClick={() => dispatch({ type: "UPDATE_QTY", payload: { id: it.id, quantity: it.quantity + 1 } })}>+</button>
// // //                 <button onClick={() => dispatch({ type: "REMOVE_FROM_CART", payload: it.id })} style={{ marginLeft: 12 }}>Remove</button>
// // //               </div>
// // //             </div>
// // //           </div>
// // //         ))}
// // //       </div>

// // //       {/* Part 3: summary */}
// // //       <aside style={{ background: "#fff", padding: 16, borderRadius: 8 }}>
// // //         <h3>Order Summary</h3>
// // //         <div style={{ display: "flex", justifyContent: "space-between", marginTop: 8 }}>
// // //           <div>Items ({items.reduce((s, it) => s + it.quantity, 0)})</div>
// // //           <div>${subtotal.toFixed(2)}</div>
// // //         </div>
// // //         <div style={{ marginTop: 12 }}>
// // //           <button style={{ width: "100%", padding: 10, borderRadius: 6, background: "#ffd814", border: "none" }}>Proceed to Checkout</button>
// // //         </div>
// // //       </aside>
// // //     </div>
// // //   );
// // // }
// // // ```

// // // # 15) Detail page styling & description

// // // The `ProductDetail.jsx` above shows the pattern: image left, details right, bold price, description paragraph. You can expand description with features array and render bullets.

// // // # 16) `useReducer` + `useContext` explanation (brief)

// // // * `useReducer` gives you: a state object + `dispatch(action)`; reducer pure function decides how new state is built from previous state and action.
// // // * `useContext` allows you to expose the `state` and `dispatch` to any component (no prop drilling).
// // // * In this pattern: `StoreProvider` holds `useReducer`, passes `{ state, dispatch }` through context. Components call `useStore()` to access `state` and `dispatch()`. Example action: `dispatch({ type: 'ADD_TO_CART', payload: product })`.

// // // # 17) Add to cart flow (how it works)

// // // 1. User clicks "Add" on a product card or product detail.
// // // 2. That component calls `dispatch({ type: 'ADD_TO_CART', payload: { id, title, price, image } })`.
// // // 3. Reducer checks if item exists → increment quantity or push a new item with `quantity:1`.
// // // 4. Header reads `state.cart` (via `useStore`) and shows cart count; CartPage reads `state.cart` to render list/totals.

// // // # 18) Loading functionality integration

// // // * Use a `loading` state in pages that fetch data (ProductDetail, Home if you simulate network).
// // // * Show a `Spinner` (or skeleton) while `loading` is true.
// // // * Example in ProductDetail uses `setTimeout` to simulate network latency.

// // // # 19) Category routing + header category links

// // // * In header you can render category links like `<Link to="/category/Electronics">Electronics</Link>`.
// // // * The `CategoryPage` uses `useParams()` to filter `PRODUCTS` by category.

// // // # 20) Cart page — parts recap

// // // * **Cart Page Part One:** list each item (image + title + unit price).
// // // * **Cart Page Part Two:** quantity controls and remove per item (dispatch UPDATE\_QTY and REMOVE\_FROM\_CART).
// // // * **Cart Page Part Three:** summary / subtotal and "Proceed to Checkout" (disabled or route to a mock checkout).

// // // # 21) Styling notes & improvements

// // // * I used inline styles for demos. For a real project:

// // //   * Use CSS modules, or Tailwind (recommended) for rapid styling. To add Tailwind, install it and configure postcss.
// // //   * Add responsive breakpoints for grid and product detail layout.
// // //   * Add skeleton loaders for product cards for better perceived performance.

// // // # 22) Optional improvements (next steps)

// // // * Persist cart to `localStorage` (use `useEffect` in `StoreProvider` to save/load).
// // // * Add product reviews, ratings, sort, filters, pagination.
// // // * Add React Query for data fetching (if you later wire to a real API).
// // // * Add unit tests for the reducer (very useful).

// // // # 23) How I suggest we continue (I can do any of these next)

// // // Pick one and I’ll implement it directly:

// // // * Convert styles to Tailwind and show the config.
// // // * Add `localStorage` persistence for cart.
// // // * Create a downloadable zip of the full project (all files).
// // // * Add a mock checkout (shipping address form + fake payment flow).
// // // * Add product search suggestions and category links in header.

// // // ---

// // // If you want, I can now:

// // // * generate the **full set of files** in the canvas (one file per component/page) ready for copy/paste, or
// // // * implement **localStorage** persistence next, or
// // // * convert the UI to **Tailwind**.

// // // Tell me which next step you want and I’ll produce the files/code for that straight away.
